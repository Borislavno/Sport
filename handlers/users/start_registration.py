from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, ReplyKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData

from loader import dp, bot
from utils.db_api.gino import Goal, User, Trainer, Place, Progress, Week, db
from utils.states import Newbie

gender_cd = CallbackData('user', 'sex')


async def format_phone_number(phone_number: str) -> str:
    """
    –û—Å—Ç–≤–ª—è–µ—Ç –≤ —Å—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ 8, —Ç–æ –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ 7.
    :param phone_number:
    :return:
    """
    phone_number = ''.join(i for i in phone_number if i.isdigit())
    phone_number = phone_number[:1].replace('8', '7') + phone_number[1:]
    return phone_number


@dp.callback_query_handler(text='cancel_reg', state='*')
async def cancel(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    keyboard_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–Ø —Å–º–æ–≥—É, –µ—â—ë —Ä–∞–∑!', callback_data='user_registration')],
        ]
    )
    reply = '–¢—ã –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã!?'
    await call.message.answer_sticker(sticker='CAACAgIAAxkBAAIFeF-MOIbW2h50MT8-zV0lNghLaeMQAAKcAQACJQNSD4NGjRGcwhDcGwQ')
    await call.message.answer(text=reply, reply_markup=keyboard_markup)


@dp.callback_query_handler(text='user_registration')
async def user_registration(call: CallbackQuery, state: FSMContext):
    await Newbie.Name.set()
    reply = '–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ç–≤–æ–π –ø—É—Å—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –∏ –∫—Ä–∞—Å–∏–≤–æ–º—É —Ç–µ–ª—É —Å–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
    await call.message.answer_sticker(sticker='CAACAgIAAxkBAAIFfF-MOL11XOMpkauOiYToE06-yYO4AAKWAQACJQNSD1GYpaVpXb4FGwQ')
    await call.message.answer(text=reply)


@dp.message_handler(text='/start')
async def user_register(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    reply = '–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ç–≤–æ–π –ø—É—Å—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –∏ –∫—Ä–∞—Å–∏–≤–æ–º—É —Ç–µ–ª—É —Å–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
    await message.answer_sticker(sticker='CAACAgIAAxkBAAIFfF-MOL11XOMpkauOiYToE06-yYO4AAKWAQACJQNSD1GYpaVpXb4FGwQ')
    await message.answer(text=reply)
    await Newbie.Name.set()


@dp.message_handler(state=Newbie.Name)
async def user_name(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 2)
    keyboard_markup = InlineKeyboardMarkup()
    name = message.text
    if name and len(name) <= 50:
        await state.update_data(name=name)
        reply = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n' \
                f'–¢–≤–æ–π –ø–æ–ª?\U0001F447'
        keyboard_markup.add(
            InlineKeyboardButton(text='\U0001F468', callback_data=gender_cd.new(sex='–ú—É–∂—á–∏–Ω–∞')),
            InlineKeyboardButton(text='\U0001F469', callback_data=gender_cd.new(sex='–ñ–µ–Ω—â–∏–Ω–∞')),
        )
        await message.answer_sticker(sticker='CAACAgIAAxkBAAIFiF-MOY4VLOoEn9Y1XmBKsVzszxM6AAKbAQACJQNSDyYGRRDR6Z3GGwQ')
        await Newbie.Gender.set()
    else:
        reply = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è, –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.'

    await message.answer(text=reply, reply_markup=keyboard_markup)


@dp.callback_query_handler(gender_cd.filter(), state=Newbie.Gender)
async def user_sex(call: CallbackQuery, state: FSMContext, callback_data: dict):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)
    user_sex = callback_data.get('sex')
    await state.update_data(gender=user_sex)
    reply = f'–û—Ç–ª–∏—á–Ω–æ!\n' \
            f'–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?'
    await call.message.answer(text=reply)
    await Newbie.Age.set()


@dp.message_handler(state=Newbie.Age)
async def user_age(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    age = message.text
    if age.isdigit() and len(age) <= 3:
        await state.update_data(age=age)
        await Newbie.Weight.set()
        reply = '–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å —Å–µ–π—á–∞—Å? –£–∫–∞–∂–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∫–≥. –ù–∞–ø—Ä–∏–º–µ—Ä 84.200'
        sticker = await message.answer_sticker(
            sticker='CAACAgIAAxkBAAIFdF-MOFyrWxfeaz4VsxqA-L0cMglzAAKKAQACJQNSDxuo4MQYC7YyGwQ')
        await message.answer(text=reply)
    else:
        reply = '–£–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ü–∏—Ñ—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä 21'
        await message.answer(text=reply)



@dp.message_handler(state=Newbie.Weight)
async def user_weight(message: Message, state: FSMContext):
    weight = message.text
    if weight and len(weight) <= 6:
        await state.update_data(weight=weight)
        await Newbie.Height.set()
        reply = '–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç? –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö.'
        await message.answer(text=reply)
    else:
        reply = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏ –≤–µ—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.'
        await message.answer(text=reply)
        return


@dp.message_handler(state=Newbie.Height)
async def user_height(message: Message, state: FSMContext):
    height = message.text
    if height.isdigit() and len(height) <= 3:
        await state.update_data(height=height)
        await Newbie.Goal.set()
        keyboard_markup = InlineKeyboardMarkup(row_width=1)
        goals = await Goal.query.gino.all()
        for goal in goals:
            keyboard_markup.insert(
                InlineKeyboardButton(text=goal.name, callback_data=goal.id)
            )
        keyboard_markup.row(
            InlineKeyboardButton(text='–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–¥–∞—é—Å—å!', callback_data='cancel_reg')
        )
        reply = '–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ü–µ–ª—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö? –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç.'
        await message.answer(text=reply, reply_markup=keyboard_markup)
    else:
        reply = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏ –≤–µ—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.'
        await message.answer(text=reply, reply_markup=keyboard_markup)


@dp.callback_query_handler(state=Newbie.Goal)
async def user_goal(call: CallbackQuery, state: FSMContext):
    keyboard_markup = InlineKeyboardMarkup()
    await state.update_data(goal_id=int(call.data))
    await Newbie.Lifestyle.set()
    reply = '–•–æ—Ä–æ—à–∞—è —Ü–µ–ª—å! –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?'
    keyboard_markup.add(InlineKeyboardButton(text='–ù–µ –æ—á–µ–Ω—å –ø–æ–¥–≤–∏–∂–Ω—ã–π', callback_data='–Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–π'))
    keyboard_markup.add(InlineKeyboardButton(text='–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', callback_data='–º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π'))
    keyboard_markup.add(InlineKeyboardButton(text='–ü–æ–¥–≤–∏–∂–Ω—ã–π', callback_data='–ø–æ–¥–≤–∏–∂–Ω—ã–π'))
    keyboard_markup.add(InlineKeyboardButton(text='–û—á–µ–Ω—å –ø–æ–¥–≤–∏–∂–Ω—ã–π', callback_data='–æ—á–µ–Ω—å –ø–æ–¥–≤–∏–∂–Ω—ã–π'))
    await call.message.answer(text=reply, reply_markup=keyboard_markup)


@dp.callback_query_handler(state=Newbie.Lifestyle)
async def user_goal(call: CallbackQuery, state: FSMContext):
    keyboard_markup = InlineKeyboardMarkup(row_width=1)
    await state.update_data(lifestyle=call.data)
    await Newbie.Place.set()
    reply = '–•–æ—Ä–æ—à–∞—è —Ü–µ–ª—å! –¢—ã –±—É–¥–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—Å—å—è –¥–æ–º–∞ –∏–ª–∏ –≤ –∑–∞–ª–µ?'
    places = await Place.query.gino.all()
    for place in places:
        keyboard_markup.insert(
            InlineKeyboardButton(text=place.name, callback_data=place.id)
        )
    keyboard_markup.row(
        InlineKeyboardButton(text='–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–¥–∞—é—Å—å!', callback_data='cancel_reg')
    )
    await call.message.answer(text=reply, reply_markup=keyboard_markup)


@dp.callback_query_handler(state=Newbie.Place)
async def workout_times(call: CallbackQuery, state: FSMContext):
    keyboard_markup = InlineKeyboardMarkup()
    place = call.data
    await Newbie.Times.set()
    await state.update_data(place=place)
    keyboard_markup.add(InlineKeyboardButton(text='2 —Ä–∞–∑–∞', callback_data='2'))
    keyboard_markup.add(InlineKeyboardButton(text='3 —Ä–∞–∑–∞', callback_data='3'))
    keyboard_markup.add(InlineKeyboardButton(text='4 —Ä–∞–∑–∞', callback_data='4'))
    keyboard_markup.add(InlineKeyboardButton(text='5 —Ä–∞–∑–∞', callback_data='5'))
    keyboard_markup.add(InlineKeyboardButton(text='6 —Ä–∞–∑–∞', callback_data='6'))
    reply = f'–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?'
    await call.message.answer(text=reply, reply_markup=keyboard_markup)


@dp.callback_query_handler(state=Newbie.Times)
async def workout_training(call: CallbackQuery, state: FSMContext):
    training_times = call.data
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
                                   keyboard=[
                                       [
                                           KeyboardButton(text="üì±",
                                                          request_contact=True)
                                       ]
                                   ])
    await Newbie.PhoneNumber.set()
    await state.update_data(training_times=training_times)
    reply = f'–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–º –∏–ª–∏ –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É,' \
            f' –º—ã –ø–æ–ª—É—á–∏–º —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' \
            f'–ú–æ–∂–µ—à—å –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å, –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –Ω–µ —É–∑–Ω–∞—é—Ç —Ç–≤–æ–π –Ω–æ–º–µ—Ä üòâ .'
    await call.message.answer(text=reply, reply_markup=keyboard)


@dp.message_handler(content_types=types.ContentType.CONTACT, state=Newbie.PhoneNumber)
@dp.message_handler(state=Newbie.PhoneNumber)
async def user_phone_number(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    phone_number = message.text or str(message.contact.phone_number)
    phone = await format_phone_number(phone_number)
    if len(phone) == 11 or 12 and phone.isdigit() == True:
        await state.update_data(phone=phone)
        await Newbie.Trainer.set()
        await message.answer('–¢—ã –±—É–¥–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –¥–ª—è —Å–µ–±—è, –∏–ª–∏ –≥–æ—Ç–æ–≤ –±—ã—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö?', reply_markup=
        InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–î–ª—è —Å–µ–±—è', callback_data='–¥–ª—è —Å–µ–±—è')
                ],
                [
                    InlineKeyboardButton(text='–ì–æ—Ç–æ–≤ –±—ã—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º', callback_data='—Ç—Ä–µ–Ω–µ—Ä')
                ]
            ]
        ))
    else:
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89211234565 –∏–ª–∏ +79211234565'
        await message.answer(text=text, reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,
                                                                         keyboard=[
                                                                             [
                                                                                 KeyboardButton(text="üì±",
                                                                                                request_contact=True)
                                                                             ]
                                                                         ]))


@dp.callback_query_handler(state=Newbie.Trainer)
async def user_final(call: CallbackQuery, state: FSMContext):
    if call.data == '—Ç—Ä–µ–Ω–µ—Ä':
        await state.update_data(is_trainer='True')
    keyboard_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ç—Ä–µ–Ω–µ—Ä! –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞!', callback_data='cancel_reg')],
        ]
    )
    keyboard_markup.add(InlineKeyboardButton(text='–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ!', callback_data='save_reg_user'))
    data = await state.get_data()
    name = data['name']
    gender = data['gender']
    age = data['age']
    height = data['height']
    weight = data['weight']
    goal_id = data['goal_id']
    lifestyle = data['lifestyle']
    place = await Place.get(int(data['place']))
    training_times = data['training_times']
    phone_number = data['phone']
    goal = await Goal.get(int(goal_id))
    reply = '–î–∞–≤–∞–π –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º:\n' \
            f'–¢–≤–æ—ë –∏–º—è {name} –∏ —Ç–µ–±–µ {age} –ª–µ—Ç, –ø–æ–ª {gender}. \n' \
            f'–¢–≤–æ—è —Ü–µ–ª—å : {goal.name}, –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ {lifestyle}, –∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ—Å—Ç {height} –∏ –≤–µ—Å {weight} –∫–≥\n' \
            f'–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {place.name} –∏ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è {training_times} —Ä–∞–∑(–∞) –≤ –Ω–µ–¥–µ–ª—é\n' \
            f'–ê –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏ —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number}\n' \
            f'–í—Å—ë –≤–µ—Ä–Ω–æ?'
    await call.message.answer_sticker(
        sticker='CAACAgIAAxkBAAIFdl-MOILVpRMiJVvY7hMUqbQHKWLuAAKQAQACJQNSD00wsDgYgXCMGwQ')
    await call.message.answer(text=reply, reply_markup=keyboard_markup)
    await state.set_state('confirm')


@dp.callback_query_handler(text='save_reg_user', state='confirm')
async def save_reg_user(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    now = datetime.utcnow()
    user = await User.create(id=int(call.from_user.id),
                             name=call.from_user.username or str(call.from_user.id),
                             fullname=data['name'],
                             gender=data['gender'],
                             banned=False,
                             age=data['age'],
                             height=data['height'],
                             weight=data['weight'],
                             goal=int(data['goal_id']),
                             lifestyle=data['lifestyle'],
                             place=int(data['place']),
                             training_times=int(data['training_times']),
                             phone_number=data['phone'])
    for one in data.keys():
        if one == 'is_trainer':
            total = await db.func.count(Trainer.id).gino.scalar() or 0
            await user.update(is_trainer=True).apply()
            await Trainer.create(id=total+1,
                                 user=call.from_user.id)

    total = await db.func.count(Progress.id).gino.scalar() or 0
    progress = await Progress.create(
        id=total+1,
        user=call.from_user.id,
        update_week=1
    )
    total = await db.func.count(Week.id).gino.scalar() or 0
    week = await Week.create(
        id=total+1,
        progress=progress.id,
        begin=now.date(),
        day_one=int(data['weight'])
    )
    await progress.update(week_1=week.id).apply()
    keyboard_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='main')],
        ]
    )
    reply = '–ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –∏ –∫—Ä–∞—Å–∏–≤–æ–º—É —Ç–µ–ª—É! ' \
            '–ü–æ–∫–∞ —è —Å–æ—Å—Ç–∞–≤–ª—è—é –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ ' \
            '—Ä–∞–∑–¥–µ–ª–µ "–§–µ–¥—è –≤ —á—ë–º —Ç–≤–æ–π —Å–µ–∫—Ä–µ—Ç!?" –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ö–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞, –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ ' \
            '—Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏".'
    await state.finish()
    await call.message.answer_sticker(sticker='CAACAgIAAxkBAAIFjF-MPNEUNfyG9YCZ3desbosToUwNAAKAAQACJQNSD7tHz-822-uaGwQ')
    await call.message.answer(text=reply, reply_markup=keyboard_markup)
